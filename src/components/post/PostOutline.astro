---
import type { MarkdownHeading } from "astro";
import { linkableMdHeadings } from "@/constants";

import RecursiveList from "./RecursiveList.astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;

type MarkdownHeadingWithChildren = MarkdownHeading & {
  children: MarkdownHeadingWithChildren[];
};
export type MarkdownHeadingTree = MarkdownHeadingWithChildren[];

function buildHeadingTree(headings: MarkdownHeading[]): MarkdownHeadingTree {
  const root = { depth: 0, slug: "", text: "", children: [] };
  const stack: MarkdownHeadingWithChildren[] = [root];

  // a bit hacky, assumes linkableMdHeadings
  // is sequential without gaps
  const maxDepth = linkableMdHeadings.length;

  for (const item of headings) {
    if (item.depth > maxDepth) {
      continue;
    }
    while (item.depth <= stack[stack.length - 1]!.depth) {
      stack.pop();
    }

    const newNode = { ...item, children: [] } as MarkdownHeadingWithChildren;
    stack[stack.length - 1]!.children!.push(newNode);
    stack.push(newNode);
  }

  return root.children;
}

const headingTree = buildHeadingTree(headings);
---

{
  !!headings.length && (
    <aside id="post-outline" class="sticky top-20 order-2 -me-32 hidden basis-64 lg:block">
      <h2 class="font-semibold">Contents</h2>
      <RecursiveList headings={headingTree} />
    </aside>
  )
}
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const sections = document.querySelectorAll("article .md-title");
    const tocItems = document.querySelectorAll("a.toc");
    const tocMap = Array.from(sections).reduce((acc, el, i) => ({ ...acc, [el.id]: tocItems[i] }), {});
    let current = sections[0]?.id;
    // Toggle classes when items are in view
    sections.forEach((s) => {
      new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const id = entry.target.id;
            if (entry.isIntersecting) {
              // remove active classes and attributes
              tocMap[current].removeAttribute("data-current-active-tab-content-item");
              tocMap[current].parentElement.classList.remove("border-primary", "dark:border-primary");
              tocMap[current].parentElement.classList.add("border-zinc-200", "dark:border-zinc-700");
              tocMap[current].parentElement.removeAttribute("data-current-active-parent-tab-content-item");

              // set classses and attributes on the new active toc item
              tocMap[id].parentElement.classList.add("border-primary", "dark:border-primary");
              tocMap[id].parentElement.classList.remove("border-zinc-200", "dark:border-zinc-700");
              tocMap[id].setAttribute("data-current-active-tab-content-item", true);
              tocMap[id].parentElement.setAttribute("data-current-active-parent-tab-content-item", true);
              // update current toc item
              current = id;
            }
          });
        },
        {
          rootMargin: "-100px 0% -80px",
          threshold: 1,
        }
      ).observe(s);
    });
  });
</script>
